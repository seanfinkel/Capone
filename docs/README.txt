"Class Diagram - Main Elements of Milestone 3.jpg":
	From Milestone 2, we had the Parliament be an observable object, and userprofile be the observer. For this milestone, we added a UI element as an observer - the MPTableView table. This way, whenever the Parliament is updated (for example, by loading new MPs from the web), the MPTable is updated as well. In addition, UserProfile will also update - and automatically generate new recommendations based on the last-used-recommender type, which is store in the properities file.
	New to this milestone, we made UserProfile itself also be an observable object - that way, whenever it changes (e.g. new keywords added, MPs removed etc), it lets all its observers know about it. It's important to mention that it also automatically generates recommended speeches whenever it changes. Its observers are the RecommendationTable and the UserProfile table(s), as they reflect content that is stored inside the UserProfile.	

"Object Diagram - main elements of Capone GUI.jpg":
	In order to create our GUI, we created a JFrame class called "CaponeGUI.java". This general class does things like create the menubar, set up progress monitor windows for loading information into parliament, and put together the three views into tabs. Each of the three views (MPTableView, RecommenderView, UserProfileView), which are in seperate packages, contain a number of elements (many of which are not shown in the diagram, due to space limitations) put together into a panel representing each of the views. 
	All the tables used in this application (MPTable, RecommenderTable, UserProfileMPTable and UserProfileKeywordTable) have "table models" - telling the Swing framework how to construct the tables - in a seperate class (and file).

A small note about progress monitors:
	In order to stop the GUI from "freezing" whenever we load a large dataset into Parliament (either from web or from disk), we opted to use Swing's ProgressMonitors - which allows us to do the "work" of loading the data in a seperate thread, while keeping the EventThread available for user interaction, as well as allows us to show a progress bar to have a visual representation of how much of the "work" the program has done so far.
	All 3 (load from disk, load MPs from web, load speeches from web) progress monitors are classes declared inside the CaponeGUI.java class.